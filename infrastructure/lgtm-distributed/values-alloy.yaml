serviceMonitor:
  enabled: true
alloy:
  extraPorts:
  - name: "otelgrpc"
    port: 4317
    targetPort: 4317
    protocol: "TCP"
  configMap:
    content: |-
      //==========================================SETUP==========================================
      logging {
        format = "logfmt"
      }
      loki.write "default" {
        endpoint {
          url = "http://lgtm-distributed-loki-gateway/loki/api/v1/push"
        }
      }
      prometheus.remote_write "mimir" {
        endpoint {
          url = "http://lgtm-distributed-mimir-nginx/api/v1/push"
        }
      }
      otelcol.exporter.otlp "tempo" {
        client {
          endpoint = "lgtm-distributed-tempo-distributor:4317"
            tls {
              insecure = true
              insecure_skip_verify = true
            }
        }
      }
      //==========================================SELF_METRICS==========================================
      prometheus.exporter.self "self_metrics" {
      }

      prometheus.scrape "self_scrape" {
        targets    = prometheus.exporter.self.self_metrics.targets
        forward_to = [prometheus.remote_write.mimir.receiver]
      }

      //==========================================POD_LOGS==========================================
      discovery.kubernetes "pod" {
        role = "pod"
      }
      discovery.relabel "pod_logs" {
        targets = discovery.kubernetes.pod.targets

        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          action = "replace"
          target_label = "namespace"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          action = "replace"
          target_label = "pod"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          action = "replace"
          target_label = "container"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
          action = "replace"
          target_label = "app"
        }

        rule {
          source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_name"]
          action = "replace"
          target_label = "job"
          separator = "/"
          replacement = "$1"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
          action = "replace"
          target_label = "__path__"
          separator = "/"
          replacement = "/var/log/pods/*$1/*.log"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_container_id"]
          action = "replace"
          target_label = "container_runtime"
          regex = "^(\\S+):\\/\\/.+$"
          replacement = "$1"
        }
      }
      loki.source.kubernetes "pod_logs" {
        targets    = discovery.relabel.pod_logs.output
        forward_to = [loki.process.process.receiver]
      }
      loki.process "process" {
        forward_to = [loki.write.default.receiver]
      }

      //==========================================EVENTS==========================================
      loki.source.kubernetes_events "cluster_events" {
        job_name   = "integrations/kubernetes/eventhandler"
        log_format = "logfmt"
        forward_to = [loki.process.cluster_events.receiver]
      }
      loki.process "cluster_events" {
        forward_to = [loki.write.default.receiver]
        stage.labels {
          values = {
            kubernetes_cluster_events = "job",
          }
        }
      }

      //==========================================SERVICE_MONITORS==========================================
      # discovery.kubernetes "service_monitors" {
      #   role = "service_monitor"
      # }

      # discovery.kubernetes "pods" {
      #   role = "pod"
      # }

      # discovery.kubernetes "endpoints" {
      #   role = "endpoints"
      # }

      # prometheus.scrape "service_monitors" {
      #   targets = discovery.kubernetes.service_monitors.targets
      #   forward_to = [prometheus.remote_write.mimir.receiver]
      #   clustering {
      #     enabled = true
      #   }
      #   scrape_interval = "30s"
      #   scrape_timeout = "10s"
      # }

      # prometheus.scrape "pods" {
      #   targets = discovery.kubernetes.pods.targets
      #   forward_to = [prometheus.remote_write.mimir.receiver]
      #   clustering {
      #     enabled = true
      #   }
      #   scrape_interval = "30s"
      #   scrape_timeout = "10s"
      # }

      # prometheus.scrape "endpoints" {
      #   targets = discovery.kubernetes.endpoints.targets
      #   forward_to = [prometheus.remote_write.mimir.receiver]
      #   clustering {
      #     enabled = true
      #   }
      #   scrape_interval = "30s"
      #   scrape_timeout = "10s"
      # }
      prometheus.operator.servicemonitors "servicemonitor" {
          forward_to = [prometheus.remote_write.mimir.receiver]
      }

      //==========================================ALERT_RULES==========================================
      mimir.rules.kubernetes "default" {
        address = "http://lgtm-distributed-mimir-nginx"
      }

      //==========================================TRACES==========================================
      otelcol.receiver.otlp "traces" {
        http {}
        grpc {
          endpoint = "0.0.0.0:4317"
        }
        output {
          traces  = [otelcol.processor.batch.traces.input]
        }
      }
      otelcol.processor.batch "traces" {
        output {
          traces  = [otelcol.exporter.otlp.tempo.input]
        }
      }

      //==========================================CA ADVISOR METRICS==========================================
      discovery.kubernetes "nodes" {
        role = "node"
      }
      discovery.relabel "pods_metrics" {
        targets = discovery.kubernetes.nodes.targets
        rule {
          replacement  = "kubernetes.default.svc:443"
          target_label = "__address__"
        }
        rule {
          regex         = "(.+)"
          replacement   = "/api/v1/nodes/$1/proxy/metrics/cadvisor"
          source_labels = ["__meta_kubernetes_node_name"]
          target_label  = "__metrics_path__"
        }
      }
      prometheus.scrape "pods_metrics" {
        clustering {
            enabled = true
        }
        targets      = discovery.relabel.pods_metrics.output
        job_name     = "integrations/kubernetes/kubelet"
        scheme       = "https"
        honor_labels = true
        forward_to = [prometheus.remote_write.mimir.receiver]
        bearer_token_file = "/run/secrets/kubernetes.io/serviceaccount/token"
        tls_config {
          insecure_skip_verify = true
          server_name          = "kubernetes"
        }
        scrape_interval = "30s"
        scrape_timeout = "10s"
      }

      //==========================================NODE METRICS==========================================
      prometheus.exporter.unix "os_metrics" { }
      prometheus.scrape "os_metrics" {
        clustering {
            enabled = true
        }
        targets    = prometheus.exporter.unix.os_metrics.targets
        forward_to = [prometheus.remote_write.mimir.receiver]
        scrape_interval = "30s"
        scrape_timeout = "10s"
      }
